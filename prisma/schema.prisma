datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  username       String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole  @default(USER)
  password       String?
  posts          Post[]
  location       String?
  bio            String?
  instagram      String?
  website        String?
  focal          String?
  camera         String?
  subscriptionId String?
  createdAt      DateTime  @default(now())
  albums         Album[]
}

model Album {
  id     String @id @default(cuid())
  title  String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  images Post[]

  @@index([userId])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String?
  image       String
  camera      String?
  location    String?
  shutter     String?
  iso         String?
  aperture    String?
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  album       Album?     @relation(fields: [albumId], references: [id])
  albumId     String?
  categories  Category[]

  @@index([userId])
  @@index([albumId])
}

model Category {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}
